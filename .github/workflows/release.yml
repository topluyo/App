name: Build and Release Electron App

on:
  workflow_dispatch:
  push:
    tags:
      - '*.*' # Trigger on version tags like v1.0.0

permissions:
  contents: write

jobs:
  buildExe:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-14]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Set up Python (macOS için distutils)
        if: matrix.os == 'macos-14'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python build deps (macOS)
        if: matrix.os == 'macos-14'
        run: |
          python3 -m ensurepip --upgrade
          python3 -m pip install --upgrade pip setuptools

      - name: Install dependencies
        run: npm install

      # ✅ CodeSignTool'u indir ve hazırla (Windows için) - BUILD ÖNCESINDE
      - name: Download and Setup CodeSignTool
        if: matrix.os == 'windows-latest'
        run: |
          echo "Downloading CodeSignTool..."
          Invoke-WebRequest -Uri "https://www.ssl.com/download/codesigntool-for-windows/" -OutFile "CodeSignTool.zip"
          echo "Extracting CodeSignTool..."
          Expand-Archive -Path "CodeSignTool.zip" -DestinationPath "." -Force
          echo "CodeSignTool setup completed"
          Get-ChildItem -Recurse | Where-Object { $_.Name -like "*CodeSign*" } | ForEach-Object { Write-Host $_.FullName }
        shell: powershell

      - name: Build Electron App
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            npm run build:linux
          elif [ "${{ matrix.os }}" = "windows-latest" ]; then
            npm run build:winexe
          else
            npm run build:mac
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ESIGNER_USERNAME: ${{ secrets.ESIGNER_USERNAME }}
          ESIGNER_PASSWORD: ${{ secrets.ESIGNER_PASSWORD }}
          ESIGNER_CREDENTIAL_ID: ${{ secrets.ESIGNER_CREDENTIAL_ID }}
          ESIGNER_TOTP: ${{ secrets.ESIGNER_TOTP }}

      # ✅ Package.json'dan version bilgisini al (Windows için)
      - name: Get version from package.json
        if: matrix.os == 'windows-latest'
        id: package-version
        run: |
          $version = (Get-Content package.json | ConvertFrom-Json).version
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "Version: $version"
        shell: powershell

      # ✅ İmzalanmış portable uygulamayı ZIP olarak paketleyin
      - name: Create Portable ZIP Package
        if: matrix.os == 'windows-latest'
        run: |
          $version = "${{ steps.package-version.outputs.version }}"
          $zipName = "Topluyo-Setup-$version-portable.zip"
          echo "Creating portable ZIP package: $zipName"
          Compress-Archive -Path "dist/win-unpacked/*" -DestinationPath "dist/$zipName" -CompressionLevel Optimal
          echo "ZIP package created successfully"
          if (Test-Path "dist/$zipName") {
            $size = (Get-Item "dist/$zipName").Length
            echo "ZIP file size: $([math]::Round($size/1MB, 2)) MB"
          }
        shell: powershell

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # buildStore:
  #   runs-on: windows-latest

  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v2
      
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: '20'

  #     - name: Install dependencies
  #       run: npm install

  #     - name: Build Electron App
  #       run: npm run build:winstore
  #       env:
  #         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Upload Microsoft Release
  #       uses: windows-store-publish@v1
  #       with:
  #         package-path: 'dist/*.appx'
  #         appId: ${{ secrets.WINDOWS_STORE_APP_ID }}
  #         publisherId: ${{ secrets.WINDOWS_STORE_PUBLISHER_ID }}
  #         skipSigning: true 
