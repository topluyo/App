name: Development Build and Release Electron App

on:
    workflow_dispatch:

permissions:
  contents: write

jobs:
  buildExe:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: linux
          - os: windows-latest
            name: nsis
          - os: windows-latest
            name: appx
          - os: windows-latest
            name: portable
          - os: macos-14
            name: mac
    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Set up Python (macOS için distutils)
        if: matrix.os == 'macos-14'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python build deps (macOS)
        if: matrix.os == 'macos-14'
        run: |
          python3 -m ensurepip --upgrade
          python3 -m pip install --upgrade pip setuptools

      - name: Install dependencies
        run: npm install

      - name: Build Electron App
        shell: bash
        run: |
          if [ "${{ matrix.name }}" = "linux" ]; then
            npm run build:linux
          elif [ "${{ matrix.name }}" = "nsis" ]; then
            npm run build:winexe
          elif [ "${{ matrix.name }}" = "appx" ]; then
            npm run build:winstore
          elif [ "${{ matrix.name }}" = "portable" ]; then
            npm run build:winportable
          elif [ "${{ matrix.name }}" = "mac" ]; then
            npm run build:mac
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ✅ Package.json'dan version bilgisini al
      - name: Get version from package.json
        if: matrix.os == 'windows-latest'
        id: package-version
        run: |
          $version = (Get-Content package.json | ConvertFrom-Json).version
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "Version: $version"
        shell: powershell

      # ✅ Dosyaların varlığını kontrol et
      - name: List dist files (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "Checking dist directory contents:"
          if (Test-Path "dist") {
            Get-ChildItem -Path "dist" -Recurse | ForEach-Object { Write-Host $_.FullName }
          } else {
            Write-Host "dist directory does not exist!"
            exit 1
          }
        shell: powershell

      # ✅ Windows için eSigner ile imzala - NSIS Installer
      - name: Sign NSIS Installer
        if: matrix.os == 'windows-latest' && matrix.name == 'nsis'
        uses: sslcom/esigner-codesign@develop
        with:
          command: sign
          username: ${{ secrets.ESIGNER_USERNAME }}
          password: ${{ secrets.ESIGNER_PASSWORD }}
          credential_id: ${{ secrets.ESIGNER_CREDENTIAL_ID }}
          totp_secret: ${{ secrets.ESIGNER_TOTP }}
          file_path: dist/Topluyo-Setup-${{ steps.package-version.outputs.version }}.exe
          malware_block: false
          override: true
          clean_logs: false

      # ✅ Windows için eSigner ile imzala - Portable
      - name: Sign Portable App
        if: matrix.os == 'windows-latest' && matrix.name == 'portable'
        uses: sslcom/esigner-codesign@develop
        with:
          command: sign
          username: ${{ secrets.ESIGNER_USERNAME }}
          password: ${{ secrets.ESIGNER_PASSWORD }}
          credential_id: ${{ secrets.ESIGNER_CREDENTIAL_ID }}
          totp_secret: ${{ secrets.ESIGNER_TOTP }}
          file_path: dist/win-unpacked/Topluyo.exe
          malware_block: false
          override: true
          clean_logs: false

      # ✅ Portable uygulamayı zip dosyasına çevir
      - name: Zip Portable App
        if: matrix.os == 'windows-latest' && matrix.name == 'portable'
        run: |
          $version = "${{ steps.package-version.outputs.version }}"
          $sourceFile = "dist/Topluyo-$version.exe"
          $zipFile = "dist/Topluyo-Portable-$version.zip"
          
          if (Test-Path $sourceFile) {
            Compress-Archive -Path $sourceFile -DestinationPath $zipFile -CompressionLevel Optimal
            Write-Host "Portable app zipped: $zipFile"
          } else {
            Write-Host "Portable exe file not found: $sourceFile"
            exit 1
          }
        shell: powershell

      - name: Update latest.yml after signing (NSIS)
        if: matrix.os == 'windows-latest' && matrix.name == 'nsis'
        uses: sslcom/esigner-codesign@develop
        with:
          command: sign
          username: ${{ secrets.ESIGNER_USERNAME }}
          password: ${{ secrets.ESIGNER_PASSWORD }}
          credential_id: ${{ secrets.ESIGNER_CREDENTIAL_ID }}
          totp_secret: ${{ secrets.ESIGNER_TOTP }}
          file_path: dist/Topluyo-Setup-${{ steps.package-version.outputs.version }}.exe
          malware_block: false
          override: true
          clean_logs: false

      - name: Update latest.yml after signing (NSIS)
        if: matrix.os == 'windows-latest' && matrix.name == 'nsis'
        run: |
          $exeFile = "dist/Topluyo-Setup-${{ steps.package-version.outputs.version }}.exe"
          $version = "${{ steps.package-version.outputs.version }}"
          
          # İmzalanmış dosyanın yeni SHA512 değerini hesapla
          $fileHash = Get-FileHash -Path $exeFile -Algorithm SHA512
          $sha512 = [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($fileHash.Hash.ToLower()))
          
          # Dosya boyutunu al
          $fileSize = (Get-Item $exeFile).Length
          
          # Yeni latest.yml içeriğini oluştur
          $latestYml = @"
          version: $version
          files:
            - url: Topluyo-Setup-$version.exe
              sha512: $sha512
              size: $fileSize
          path: Topluyo-Setup-$version.exe
          sha512: $sha512
          releaseDate: '$((Get-Date).ToString("yyyy-MM-ddTHH:mm:ss.fffZ"))'
          "@
          
          # latest.yml dosyasını güncelle
          $latestYml | Out-File -FilePath "dist/latest.yml" -Encoding UTF8
          Write-Host "latest.yml updated with new SHA512"
        shell: powershell

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Topluyo-${{ matrix.name }}-${{ github.run_number }}
          path: dist/*
          retention-days: 5